import { CARMODTYPE, FIGHT_STYLE, PLAYER_STATE, TEXTDRAW_ALIGN, VEHICLE_MODEL_INFO, WEAPONSKILL } from "./SampEnum";
export declare const SendClientMessage: (playerid: number, color: string, message: string) => number;
export declare const SendClientMessageToAll: (color: string, message: string) => number;
export declare const SendPlayerMessageToPlayer: (playerid: number, senderid: number, message: string) => number;
export declare const SendPlayerMessageToAll: (senderid: number, message: string) => number;
export declare const SendDeathMessage: (killer: number, killee: number, weapon: number) => number;
export declare const SendDeathMessageToPlayer: (playerid: number, killer: number, killee: number, weapon: number) => number;
export declare const GameTextForAll: (string: string, time: number, style: number) => number;
export declare const GameTextForPlayer: (playerid: number, string: string, time: number, style: number) => number;
export declare const SetTimer: (funcname: string, interval: number, repeating: number) => number;
export declare const KillTimer: (timerid: number) => number;
export declare const GetTickCount: () => number;
export declare const GetMaxPlayers: () => number;
export declare const VectorSize: (x: number, y: number, z: number) => number;
export declare const asin: (value: number) => number;
export declare const acos: (value: number) => number;
export declare const atan: (value: number) => number;
export declare const atan2: (y: number, x: number) => number;
export declare const GetPlayerPoolSize: () => number;
export declare const GetVehiclePoolSize: () => number;
export declare const GetActorPoolSize: () => number;
export declare const SHA256_PassHash: (password: string, salt: string, ret_hash_len: number) => string;
export declare const SetSVarInt: (varname: string, int_value: number) => number;
export declare const GetSVarInt: (varname: string) => number;
export declare const SetSVarString: (varname: string, string_value: string) => number;
export declare const GetSVarString: (varname: string, len: number) => string;
export declare const SetSVarFloat: (varname: string, float_value: number) => number;
export declare const GetSVarFloat: (varname: string) => number;
export declare const DeleteSVar: (varname: string) => number;
export declare const GetSVarsUpperIndex: () => number;
export declare const GetSVarNameAtIndex: (index: number, ret_len: number) => string;
export declare const GetSVarType: (varname: string) => number;
export declare const SetGameModeText: (string: string) => number;
export declare const SetTeamCount: (count: number) => number;
export declare const AddPlayerClass: (modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, weapon1: number, weapon1_ammo: number, weapon2: number, weapon2_ammo: number, weapon3: number, weapon3_ammo: number) => number;
export declare const AddPlayerClassEx: (teamid: number, modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, weapon1: number, weapon1_ammo: number, weapon2: number, weapon2_ammo: number, weapon3: number, weapon3_ammo: number) => number;
export declare const AddStaticVehicle: (modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, color1: number, color2: number) => number;
export declare const AddStaticVehicleEx: (modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, color1: number, color2: number, respawn_delay: number, addsiren: number) => number;
export declare const AddStaticPickup: (model: number, type: number, X: number, Y: number, Z: number, virtualworld: number) => number;
export declare const CreatePickup: (model: number, type: number, X: number, Y: number, Z: number, virtualworld: number) => number;
export declare const DestroyPickup: (pickup: number) => number;
export declare const ShowNameTags: (show: number) => number;
export declare const ShowPlayerMarkers: (mode: number) => number;
export declare const GameModeExit: () => number;
export declare const SetWorldTime: (hour: number) => number;
export declare const GetWeaponName: (weaponid: number, len: number) => string;
export declare const EnableTirePopping: (enable: number) => number;
export declare const EnableVehicleFriendlyFire: () => number;
export declare const AllowInteriorWeapons: (allow: number) => number;
export declare const SetWeather: (weatherid: number) => number;
export declare const GetGravity: () => number;
export declare const SetGravity: (gravity: number) => number;
export declare const AllowAdminTeleport: (allow: number) => number;
export declare const SetDeathDropAmount: (amount: number) => number;
export declare const CreateExplosion: (X: number, Y: number, Z: number, type: number, Radius: number) => number;
export declare const EnableZoneNames: (enable: number) => number;
export declare const UsePlayerPedAnims: () => number;
export declare const DisableInteriorEnterExits: () => number;
export declare const SetNameTagDrawDistance: (distance: number) => number;
export declare const DisableNameTagLOS: () => number;
export declare const LimitGlobalChatRadius: (chat_radius: number) => number;
export declare const LimitPlayerMarkerRadius: (marker_radius: number) => number;
export declare const ConnectNPC: (name: string, script: string) => number;
export declare const IsPlayerNPC: (playerid: number) => number;
export declare const IsPlayerAdmin: (playerid: number) => number;
export declare const Kick: (playerid: number) => number;
export declare const Ban: (playerid: number) => number;
export declare const BanEx: (playerid: number, reason: string) => number;
export declare const SendRconCommand: (command: string) => number;
export declare const GetPlayerNetworkStats: (playerid: number, retstr_size: number) => string;
export declare const GetNetworkStats: (retstr_size: number) => string;
export declare const GetPlayerVersion: (playerid: number, len: number) => string;
export declare const BlockIpAddress: (ip_address: string, timems: number) => number;
export declare const UnBlockIpAddress: (ip_address: string) => number;
export declare const GetServerVarAsString: (varname: string, len: number) => string;
export declare const GetServerVarAsInt: (varname: string) => number;
export declare const GetServerVarAsBool: (varname: string) => number;
export declare const GetConsoleVarAsString: (varname: string, len: number) => string;
export declare const GetConsoleVarAsInt: (varname: string) => number;
export declare const GetConsoleVarAsBool: (varname: string) => number;
export declare const GetServerTickRate: () => number;
export declare const NetStats_GetConnectedTime: (playerid: number) => number;
export declare const NetStats_MessagesReceived: (playerid: number) => number;
export declare const NetStats_BytesReceived: (playerid: number) => number;
export declare const NetStats_MessagesSent: (playerid: number) => number;
export declare const NetStats_BytesSent: (playerid: number) => number;
export declare const NetStats_MessagesRecvPerSecond: (playerid: number) => number;
export declare const NetStats_PacketLossPercent: (playerid: number) => number;
export declare const NetStats_ConnectionStatus: (playerid: number) => number;
export declare const NetStats_GetIpPort: (playerid: number, ip_port_len: number) => string;
export declare const CreateMenu: (title: string, columns: number, x: number, y: number, col1width: number, col2width: number) => number;
export declare const DestroyMenu: (menuid: number) => number;
export declare const AddMenuItem: (menuid: number, column: number, menutext: string) => number;
export declare const SetMenuColumnHeader: (menuid: number, column: number, columnheader: string) => number;
export declare const ShowMenuForPlayer: (menuid: number, playerid: number) => number;
export declare const HideMenuForPlayer: (menuid: number, playerid: number) => number;
export declare const IsValidMenu: (menuid: number) => number;
export declare const DisableMenu: (menuid: number) => number;
export declare const DisableMenuRow: (menuid: number, row: number) => number;
export declare const GetPlayerMenu: (playerid: number) => number;
export declare const TextDrawCreate: (x: number, y: number, text: string) => number;
export declare const TextDrawDestroy: (text: number) => number;
export declare const TextDrawLetterSize: (text: number, x: number, y: number) => number;
export declare const TextDrawTextSize: (text: number, x: number, y: number) => number;
export declare const TextDrawAlignment: (text: number, alignment: number) => number;
export declare const TextDrawColor: (text: number, color: string) => number;
export declare const TextDrawUseBox: (text: number, use: number) => number;
export declare const TextDrawBoxColor: (text: number, color: string) => number;
export declare const TextDrawSetShadow: (text: number, size: number) => number;
export declare const TextDrawSetOutline: (text: number, size: number) => number;
export declare const TextDrawBackgroundColor: (text: number, color: string) => number;
export declare const TextDrawFont: (text: number, font: number) => number;
export declare const TextDrawSetProportional: (text: number, set: number) => number;
export declare const TextDrawSetSelectable: (text: number, set: number) => number;
export declare const TextDrawShowForPlayer: (playerid: number, text: number) => number;
export declare const TextDrawHideForPlayer: (playerid: number, text: number) => number;
export declare const TextDrawShowForAll: (text: number) => number;
export declare const TextDrawHideForAll: (text: number) => number;
export declare const TextDrawSetString: (text: number, string: string) => number;
export declare const TextDrawSetPreviewModel: (text: number, modelindex: number) => number;
export declare const TextDrawSetPreviewRot: (text: number, fRotX: number, fRotY: number, fRotZ: number, fZoom: number) => number;
export declare const TextDrawSetPreviewVehCol: (text: number, color1: number, color2: number) => number;
export declare const GangZoneCreate: (minx: number, miny: number, maxx: number, maxy: number) => number;
export declare const GangZoneDestroy: (zone: number) => number;
export declare const GangZoneShowForPlayer: (playerid: number, zone: number, color: string) => number;
export declare const GangZoneShowForAll: (zone: number, color: string) => number;
export declare const GangZoneHideForPlayer: (playerid: number, zone: number) => number;
export declare const GangZoneHideForAll: (zone: number) => number;
export declare const GangZoneFlashForPlayer: (playerid: number, zone: number, flashcolor: string) => number;
export declare const GangZoneFlashForAll: (zone: number, flashcolor: string) => number;
export declare const GangZoneStopFlashForPlayer: (playerid: number, zone: number) => number;
export declare const GangZoneStopFlashForAll: (zone: number) => number;
export declare const Create3DTextLabel: (text: string, color: string, X: number, Y: number, Z: number, DrawDistance: number, virtualworld: number, testLOS: number) => number;
export declare const Delete3DTextLabel: (id: number) => number;
export declare const Attach3DTextLabelToPlayer: (id: number, playerid: number, OffsetX: number, OffsetY: number, OffsetZ: number) => number;
export declare const Attach3DTextLabelToVehicle: (id: number, vehicleid: number, OffsetX: number, OffsetY: number, OffsetZ: number) => number;
export declare const Update3DTextLabelText: (id: number, color: string, text: string) => number;
export declare const CreatePlayer3DTextLabel: (playerid: number, text: string, color: string, X: number, Y: number, Z: number, DrawDistance: number, attachedplayer: number, attachedvehicle: number, testLOS: number) => number;
export declare const DeletePlayer3DTextLabel: (playerid: number, id: number) => number;
export declare const UpdatePlayer3DTextLabelText: (playerid: number, id: number, color: string, text: string) => number;
export declare const ShowPlayerDialog: (playerid: number, dialogid: number, style: number, caption: string, info: string, button1: string, button2: string) => number;
export declare const gpci: (playerid: number, maxlen: number) => string;
export declare const CreateActor: (modelid: number, X: number, Y: number, Z: number, Rotation: number) => number;
export declare const DestroyActor: (actorid: number) => number;
export declare const IsActorStreamedIn: (actorid: number, forplayerid: number) => number;
export declare const SetActorVirtualWorld: (actorid: number, vworld: number) => number;
export declare const GetActorVirtualWorld: (actorid: number) => number;
export declare const ApplyActorAnimation: (actorid: number, animlib: string, animname: string, fDelta: number, loop: number, lockx: number, locky: number, freeze: number, time: number) => number;
export declare const ClearActorAnimations: (actorid: number) => number;
export declare const SetActorPos: (actorid: number, X: number, Y: number, Z: number) => number;
export declare const GetActorPos: (actorid: number) => Array<any>;
export declare const SetActorFacingAngle: (actorid: number, ang: number) => number;
export declare const GetActorFacingAngle: (actorid: number) => number;
export declare const SetActorHealth: (actorid: number, health: number) => number;
export declare const GetActorHealth: (actorid: number) => number;
export declare const SetActorInvulnerable: (actorid: number, invulnerable: number) => number;
export declare const IsActorInvulnerable: (actorid: number) => number;
export declare const IsValidActor: (actorid: number) => number;
export declare const HTTP: (index: number, type: number, url: string, data: string, callback: string) => number;
export declare const CreateObject: (modelid: number, X: number, Y: number, Z: number, rX: number, rY: number, rZ: number, DrawDistance: number) => number;
export declare const AttachObjectToVehicle: (objectid: number, vehicleid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number) => number;
export declare const AttachObjectToObject: (objectid: number, attachtoid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number, SyncRotation: number) => number;
export declare const AttachObjectToPlayer: (objectid: number, playerid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number) => number;
export declare const SetObjectPos: (objectid: number, X: number, Y: number, Z: number) => number;
export declare const GetObjectPos: (objectid: number) => Array<any>;
export declare const SetObjectRot: (objectid: number, RotX: number, RotY: number, RotZ: number) => number;
export declare const GetObjectRot: (objectid: number) => Array<any>;
export declare const GetObjectModel: (objectid: number) => number;
export declare const SetObjectNoCameraCol: (objectid: number) => number;
export declare const IsValidObject: (objectid: number) => number;
export declare const DestroyObject: (objectid: number) => number;
export declare const MoveObject: (objectid: number, X: number, Y: number, Z: number, Speed: number, RotX: number, RotY: number, RotZ: number) => number;
export declare const StopObject: (objectid: number) => number;
export declare const IsObjectMoving: (objectid: number) => number;
export declare const EditObject: (playerid: number, objectid: number) => number;
export declare const EditPlayerObject: (playerid: number, objectid: number) => number;
export declare const SelectObject: (playerid: number) => number;
export declare const CancelEdit: (playerid: number) => number;
export declare const CreatePlayerObject: (playerid: number, modelid: number, X: number, Y: number, Z: number, rX: number, rY: number, rZ: number, DrawDistance: number) => number;
export declare const AttachPlayerObjectToVehicle: (playerid: number, objectid: number, vehicleid: number, fOffsetX: number, fOffsetY: number, fOffsetZ: number, fRotX: number, fRotY: number, RotZ: number) => number;
export declare const SetPlayerObjectPos: (playerid: number, objectid: number, X: number, Y: number, Z: number) => number;
export declare const GetPlayerObjectPos: (playerid: number, objectid: number) => Array<any>;
export declare const SetPlayerObjectRot: (playerid: number, objectid: number, RotX: number, RotY: number, RotZ: number) => number;
export declare const GetPlayerObjectRot: (playerid: number, objectid: number) => Array<any>;
export declare const GetPlayerObjectModel: (playerid: number, objectid: number) => number;
export declare const SetPlayerObjectNoCameraCol: (playerid: number, objectid: number) => number;
export declare const IsValidPlayerObject: (playerid: number, objectid: number) => number;
export declare const DestroyPlayerObject: (playerid: number, objectid: number) => number;
export declare const MovePlayerObject: (playerid: number, objectid: number, X: number, Y: number, Z: number, Speed: number, RotX: number, RotY: number, RotZ: number) => number;
export declare const StopPlayerObject: (playerid: number, objectid: number) => number;
export declare const IsPlayerObjectMoving: (playerid: number, objectid: number) => number;
export declare const AttachPlayerObjectToPlayer: (objectplayer: number, objectid: number, attachplayer: number, OffsetX: number, OffsetY: number, OffsetZ: number, rX: number, rY: number, rZ: number) => number;
export declare const SetObjectMaterial: (objectid: number, materialindex: number, modelid: number, txdname: string, texturename: string, materialcolor: string) => number;
export declare const SetPlayerObjectMaterial: (playerid: number, objectid: number, materialindex: number, modelid: number, txdname: string, texturename: string, materialcolor: string) => number;
export declare const SetObjectMaterialText: (objectid: number, text: string, materialindex: number, materialsize: number, fontface: string, fontsize: number, bold: number, fontcolor: string, backcolor: string, textalignment: number) => number;
export declare const SetPlayerObjectMaterialText: (playerid: number, objectid: number, text: string, materialindex: number, materialsize: number, fontface: string, fontsize: number, bold: number, fontcolor: string, backcolor: string, textalignment: number) => number;
export declare const SetObjectsDefaultCameraCol: (disable: number) => number;
export declare const SetSpawnInfo: (playerid: number, team: number, skin: number, x: number, y: number, z: number, rotation: number, weapon1: number, weapon1_ammo: number, weapon2: number, weapon2_ammo: number, weapon3: number, weapon3_ammo: number) => number;
export declare const SpawnPlayer: (playerid: number) => number;
export declare const SetPlayerPos: (playerid: number, x: number, y: number, z: number) => number;
export declare const SetPlayerPosFindZ: (playerid: number, x: number, y: number, z: number) => number;
export declare const GetPlayerPos: (playerid: number) => Array<any>;
export declare const SetPlayerFacingAngle: (playerid: number, ang: number) => number;
export declare const GetPlayerFacingAngle: (playerid: number) => number;
export declare const IsPlayerInRangeOfPoint: (playerid: number, range: number, x: number, y: number, z: number) => number;
export declare const GetPlayerDistanceFromPoint: (playerid: number, X: number, Y: number, Z: number) => number;
export declare const IsPlayerStreamedIn: (playerid: number, forplayerid: number) => number;
export declare const SetPlayerInterior: (playerid: number, interiorid: number) => number;
export declare const GetPlayerInterior: (playerid: number) => number;
export declare const SetPlayerHealth: (playerid: number, health: number) => number;
export declare const GetPlayerHealth: (playerid: number) => number;
export declare const SetPlayerArmour: (playerid: number, armour: number) => number;
export declare const GetPlayerArmour: (playerid: number) => number;
export declare const SetPlayerAmmo: (playerid: number, weaponslot: number, ammo: number) => number;
export declare const GetPlayerAmmo: (playerid: number) => number;
export declare const GetPlayerWeaponState: (playerid: number) => number;
export declare const GetPlayerTargetPlayer: (playerid: number) => number;
export declare const GetPlayerTargetActor: (playerid: number) => number;
export declare const SetPlayerTeam: (playerid: number, teamid: number) => number;
export declare const GetPlayerTeam: (playerid: number) => number;
export declare const SetPlayerScore: (playerid: number, score: number) => number;
export declare const GetPlayerScore: (playerid: number) => number;
export declare const GetPlayerDrunkLevel: (playerid: number) => number;
export declare const SetPlayerDrunkLevel: (playerid: number, level: number) => number;
export declare const SetPlayerColor: (playerid: number, color: string) => number;
export declare const GetPlayerColor: (playerid: number) => number;
export declare const SetPlayerSkin: (playerid: number, skinid: number) => number;
export declare const GetPlayerSkin: (playerid: number) => number;
export declare const GivePlayerWeapon: (playerid: number, weaponid: number, ammo: number) => number;
export declare const ResetPlayerWeapons: (playerid: number) => number;
export declare const SetPlayerArmedWeapon: (playerid: number, weaponid: number) => number;
export declare const GetPlayerWeaponData: (playerid: number, slot: number) => Array<any>;
export declare const GivePlayerMoney: (playerid: number, money: number) => number;
export declare const ResetPlayerMoney: (playerid: number) => number;
export declare const SetPlayerName: (playerid: number, name: string) => number;
export declare const GetPlayerMoney: (playerid: number) => number;
export declare const GetPlayerState: (playerid: number) => PLAYER_STATE;
export declare const GetPlayerIp: (playerid: number, len: number) => string;
export declare const GetPlayerPing: (playerid: number) => number;
export declare const GetPlayerWeapon: (playerid: number) => number;
export declare const GetPlayerKeys: (playerid: number) => Array<any>;
export declare const GetPlayerName: (playerid: number, len: number) => string;
export declare const SetPlayerTime: (playerid: number, hour: number, minute: number) => number;
export declare const GetPlayerTime: (playerid: number) => Array<any>;
export declare const TogglePlayerClock: (playerid: number, toggle: number) => number;
export declare const SetPlayerWeather: (playerid: number, weather: number) => number;
export declare const ForceClassSelection: (playerid: number) => number;
export declare const SetPlayerWantedLevel: (playerid: number, level: number) => number;
export declare const GetPlayerWantedLevel: (playerid: number) => number;
export declare const SetPlayerFightingStyle: (playerid: number, style: number) => number;
export declare const GetPlayerFightingStyle: (playerid: number) => number;
export declare const SetPlayerVelocity: (playerid: number, X: number, Y: number, Z: number) => number;
export declare const GetPlayerVelocity: (playerid: number) => Array<any>;
export declare const PlayCrimeReportForPlayer: (playerid: number, suspectid: number, crime: number) => number;
export declare const PlayAudioStreamForPlayer: (playerid: number, url: string, posX: number, posY: number, posZ: number, distance: number, usepos: number) => number;
export declare const StopAudioStreamForPlayer: (playerid: number) => number;
export declare const SetPlayerShopName: (playerid: number, shopname: string) => number;
export declare const SetPlayerSkillLevel: (playerid: number, skill: WEAPONSKILL, level: number) => number;
export declare const GetPlayerSurfingVehicleID: (playerid: number) => number;
export declare const GetPlayerSurfingObjectID: (playerid: number) => number;
export declare const RemoveBuildingForPlayer: (playerid: number, modelid: number, fX: number, fY: number, fZ: number, fRadius: number) => number;
export declare const GetPlayerLastShotVectors: (playerid: number) => Array<any>;
export declare const SetPlayerAttachedObject: (playerid: number, index: number, modelid: number, bone: number, fOffsetX: number, fOffsetY: number, fOffsetZ: number, fRotX: number, fRotY: number, fRotZ: number, fScaleX: number, fScaleY: number, fScaleZ: number, materialcolor1: number, materialcolor2: number) => number;
export declare const RemovePlayerAttachedObject: (playerid: number, index: number) => number;
export declare const IsPlayerAttachedObjectSlotUsed: (playerid: number, index: number) => number;
export declare const EditAttachedObject: (playerid: number, index: number) => number;
export declare const CreatePlayerTextDraw: (playerid: number, x: number, y: number, text: string) => number;
export declare const PlayerTextDrawDestroy: (playerid: number, text: number) => void;
export declare const PlayerTextDrawLetterSize: (playerid: number, text: number, x: number, y: number) => number;
export declare const PlayerTextDrawTextSize: (playerid: number, text: number, x: number, y: number) => number;
export declare const PlayerTextDrawAlignment: (playerid: number, text: number, alignment: TEXTDRAW_ALIGN) => number;
export declare const PlayerTextDrawColor: (playerid: number, text: number, color: string) => number;
export declare const PlayerTextDrawUseBox: (playerid: number, text: number, use: 0 | 1) => number;
export declare const PlayerTextDrawBoxColor: (playerid: number, text: number, color: string) => number;
export declare const PlayerTextDrawSetShadow: (playerid: number, text: number, size: number) => number;
export declare const PlayerTextDrawSetOutline: (playerid: number, text: number, size: number) => number;
export declare const PlayerTextDrawBackgroundColor: (playerid: number, text: number, color: string) => number;
export declare const PlayerTextDrawFont: (playerid: number, text: number, font: number) => number;
export declare const PlayerTextDrawSetProportional: (playerid: number, text: number, set: number) => number;
export declare const PlayerTextDrawSetSelectable: (playerid: number, text: number, set: number) => number;
export declare const PlayerTextDrawShow: (playerid: number, text: number) => number;
export declare const PlayerTextDrawHide: (playerid: number, text: number) => number;
export declare const PlayerTextDrawSetString: (playerid: number, text: number, string: string) => number;
export declare const PlayerTextDrawSetPreviewModel: (playerid: number, text: number, modelindex: number) => number;
export declare const PlayerTextDrawSetPreviewRot: (playerid: number, text: number, fRotX: number, fRotY: number, fRotZ: number, fZoom: number) => number;
export declare const PlayerTextDrawSetPreviewVehCol: (playerid: number, text: number, color1: number, color2: number) => number;
export declare const SetPVarInt: (playerid: number, varname: string, int_value: number) => number;
export declare const GetPVarInt: (playerid: number, varname: string) => number;
export declare const SetPVarString: (playerid: number, varname: string, string_value: string) => number;
export declare const GetPVarString: (playerid: number, varname: string, len: number) => string;
export declare const SetPVarFloat: (playerid: number, varname: string, float_value: number) => number;
export declare const GetPVarFloat: (playerid: number, varname: string) => number;
export declare const DeletePVar: (playerid: number, varname: string) => number;
export declare const GetPVarsUpperIndex: (playerid: number) => number;
export declare const GetPVarNameAtIndex: (playerid: number, index: number, ret_len: number) => string;
export declare const GetPVarType: (playerid: number, varname: string) => number;
export declare const SetPlayerChatBubble: (playerid: number, text: string, color: string, drawdistance: number, expiretime: number) => number;
export declare const PutPlayerInVehicle: (playerid: number, vehicleid: number, seatid: number) => number;
export declare const GetPlayerVehicleID: (playerid: number) => number;
export declare const GetPlayerVehicleSeat: (playerid: number) => number;
export declare const RemovePlayerFromVehicle: (playerid: number) => number;
export declare const TogglePlayerControllable: (playerid: number, toggle: number) => number;
export declare const PlayerPlaySound: (playerid: number, soundid: number, x: number, y: number, z: number) => number;
export declare const ApplyAnimation: (playerid: number, animlib: string, animname: string, fDelta: number, loop: number, lockx: number, locky: number, freeze: number, time: number, forcesync: number) => number;
export declare const ClearAnimations: (playerid: number, forcesync: number) => number;
export declare const GetPlayerAnimationIndex: (playerid: number) => number;
export declare const GetAnimationName: (index: number, len1: number, len2: number) => Array<any>;
export declare const GetPlayerSpecialAction: (playerid: number) => number;
export declare const SetPlayerSpecialAction: (playerid: number, actionid: number) => number;
export declare const DisableRemoteVehicleCollisions: (playerid: number, disable: number) => number;
export declare const SetPlayerCheckpoint: (playerid: number, x: number, y: number, z: number, size: number) => number;
export declare const DisablePlayerCheckpoint: (playerid: number) => number;
export declare const SetPlayerRaceCheckpoint: (playerid: number, type: number, x: number, y: number, z: number, nextx: number, nexty: number, nextz: number, size: number) => number;
export declare const DisablePlayerRaceCheckpoint: (playerid: number) => number;
export declare const SetPlayerWorldBounds: (playerid: number, x_max: number, x_min: number, y_max: number, y_min: number) => number;
export declare const SetPlayerMarkerForPlayer: (playerid: number, showplayerid: number, color: string) => number;
export declare const ShowPlayerNameTagForPlayer: (playerid: number, showplayerid: number, show: number) => number;
export declare const SetPlayerMapIcon: (playerid: number, iconid: number, x: number, y: number, z: number, markertype: number, color: string, style: number) => number;
export declare const RemovePlayerMapIcon: (playerid: number, iconid: number) => number;
export declare const AllowPlayerTeleport: (playerid: number, allow: number) => number;
export declare const SetPlayerCameraPos: (playerid: number, x: number, y: number, z: number) => number;
export declare const SetPlayerCameraLookAt: (playerid: number, x: number, y: number, z: number, cut: number) => number;
export declare const SetCameraBehindPlayer: (playerid: number) => number;
export declare const GetPlayerCameraPos: (playerid: number) => Array<any>;
export declare const GetPlayerCameraFrontVector: (playerid: number) => Array<any>;
export declare const GetPlayerCameraMode: (playerid: number) => number;
export declare const EnablePlayerCameraTarget: (playerid: number, enable: number) => number;
export declare const GetPlayerCameraTargetObject: (playerid: number) => number;
export declare const GetPlayerCameraTargetVehicle: (playerid: number) => number;
export declare const GetPlayerCameraTargetPlayer: (playerid: number) => number;
export declare const GetPlayerCameraTargetActor: (playerid: number) => number;
export declare const GetPlayerCameraAspectRatio: (playerid: number) => number;
export declare const GetPlayerCameraZoom: (playerid: number) => number;
export declare const AttachCameraToObject: (playerid: number, objectid: number) => number;
export declare const AttachCameraToPlayerObject: (playerid: number, playerobjectid: number) => number;
export declare const InterpolateCameraPos: (playerid: number, FromX: number, FromY: number, FromZ: number, ToX: number, ToY: number, ToZ: number, time: number, cut: number) => number;
export declare const InterpolateCameraLookAt: (playerid: number, FromX: number, FromY: number, FromZ: number, ToX: number, ToY: number, ToZ: number, time: number, cut: number) => number;
export declare const IsPlayerConnected: (playerid: number) => number;
export declare const IsPlayerInVehicle: (playerid: number, vehicleid: number) => number;
export declare const IsPlayerInAnyVehicle: (playerid: number) => number;
export declare const IsPlayerInCheckpoint: (playerid: number) => number;
export declare const IsPlayerInRaceCheckpoint: (playerid: number) => number;
export declare const SetPlayerVirtualWorld: (playerid: number, worldid: number) => number;
export declare const GetPlayerVirtualWorld: (playerid: number) => number;
export declare const EnableStuntBonusForPlayer: (playerid: number, enable: number) => number;
export declare const EnableStuntBonusForAll: (enable: number) => number;
export declare const TogglePlayerSpectating: (playerid: number, toggle: number) => number;
export declare const PlayerSpectatePlayer: (playerid: number, targetplayerid: number, mode: number) => number;
export declare const PlayerSpectateVehicle: (playerid: number, targetvehicleid: number, mode: number) => number;
export declare const StartRecordingPlayerData: (playerid: number, recordtype: number, recordname: string) => number;
export declare const StopRecordingPlayerData: (playerid: number) => number;
export declare const SelectTextDraw: (playerid: number, hovercolor: string) => number;
export declare const CancelSelectTextDraw: (playerid: number) => number;
export declare const CreateExplosionForPlayer: (playerid: number, X: number, Y: number, Z: number, type: number, Radius: number) => number;
export declare const SendClientCheck: (playerid: number, type: number, memAddr: number, memOffset: number, byteCount: number) => number;
export declare const db_open: (name: string) => number;
export declare const db_close: (db: number) => number;
export declare const db_query: (db: number, query: string) => number;
export declare const db_free_result: (dbresult: number) => number;
export declare const db_num_rows: (dbresult: number) => number;
export declare const db_next_row: (dbresult: number) => number;
export declare const db_num_fields: (dbresult: number) => number;
export declare const db_field_name: (dbresult: number, field: number, maxlength: number) => string;
export declare const db_get_field: (dbresult: number, field: number, maxlength: number) => string;
export declare const db_get_field_int: (result: number, field: number) => number;
export declare const db_get_field_float: (result: number, field: number) => number;
export declare const db_get_field_assoc: (dbresult: number, field: string, maxlength: number) => string;
export declare const db_get_field_assoc_int: (result: number, field: string) => number;
export declare const db_get_field_assoc_float: (result: number, field: string) => number;
export declare const db_get_mem_handle: (db: number) => number;
export declare const db_get_result_mem_handle: (result: number) => number;
export declare const db_debug_openfiles: () => number;
export declare const db_debug_openresults: () => number;
export declare const CreateVehicle: (vehicletype: number, x: number, y: number, z: number, rotation: number, color1: number, color2: number, respawn_delay: number, addsiren: number) => number;
export declare const DestroyVehicle: (vehicleid: number) => number;
export declare const IsVehicleStreamedIn: (vehicleid: number, forplayerid: number) => number;
export declare const GetVehiclePos: (vehicleid: number) => {
    x: any;
    y: any;
    z: any;
};
export declare const SetVehiclePos: (vehicleid: number, x: number, y: number, z: number) => number;
export declare const GetVehicleZAngle: (vehicleid: number) => number;
export declare const GetVehicleRotationQuat: (vehicleid: number) => Array<any>;
export declare const GetVehicleDistanceFromPoint: (vehicleid: number, X: number, Y: number, Z: number) => number;
export declare const SetVehicleZAngle: (vehicleid: number, z_angle: number) => number;
export declare const SetVehicleParamsForPlayer: (vehicleid: number, playerid: number, objective: number, doorslocked: number) => number;
export declare const ManualVehicleEngineAndLights: () => number;
export declare const SetVehicleParamsEx: (vehicleid: number, engine: number, lights: number, alarm: number, doors: number, bonnet: number, boot: number, objective: number) => number;
export declare const GetVehicleParamsEx: (vehicleid: number) => Array<any>;
export declare const GetVehicleParamsSirenState: (vehicleid: number) => number;
export declare const SetVehicleParamsCarDoors: (vehicleid: number, driver: number, passenger: number, backleft: number, backright: number) => number;
export declare const GetVehicleParamsCarDoors: (vehicleid: number) => {
    driver: -1 | 0 | 1;
    passenger: -1 | 0 | 1;
    backleft: -1 | 0 | 1;
    backright: -1 | 0 | 1;
};
export declare const SetVehicleParamsCarWindows: (vehicleid: number, driver: number, passenger: number, backleft: number, backright: number) => number;
export declare const GetVehicleParamsCarWindows: (vehicleid: number) => {
    driver: -1 | 0 | 1;
    passenger: -1 | 0 | 1;
    backleft: -1 | 0 | 1;
    backright: -1 | 0 | 1;
};
export declare const SetVehicleToRespawn: (vehicleid: number) => number;
export declare const LinkVehicleToInterior: (vehicleid: number, interiorid: number) => number;
export declare const AddVehicleComponent: (vehicleid: number, componentid: number) => number;
export declare const RemoveVehicleComponent: (vehicleid: number, componentid: number) => number;
export declare const ChangeVehicleColor: (vehicleid: number, color1: number, color2: number) => number;
export declare const ChangeVehiclePaintjob: (vehicleid: number, paintjobid: number) => number;
export declare const SetVehicleHealth: (vehicleid: number, health: number) => number;
export declare const GetVehicleHealth: (vehicleid: number) => number;
export declare const AttachTrailerToVehicle: (trailerid: number, vehicleid: number) => number;
export declare const DetachTrailerFromVehicle: (vehicleid: number) => number;
export declare const IsTrailerAttachedToVehicle: (vehicleid: number) => number;
export declare const GetVehicleTrailer: (vehicleid: number) => number;
export declare const SetVehicleNumberPlate: (vehicleid: number, numberplate: string) => number;
export declare const GetVehicleModel: (vehicleid: number) => number;
export declare const GetVehicleComponentInSlot: (vehicleid: number, slot: CARMODTYPE) => number;
export declare const GetVehicleComponentType: (component: number) => CARMODTYPE | -1;
export declare const RepairVehicle: (vehicleid: number) => number;
export declare const GetVehicleVelocity: (vehicleid: number) => Array<any>;
export declare const SetVehicleVelocity: (vehicleid: number, X: number, Y: number, Z: number) => number;
export declare const SetVehicleAngularVelocity: (vehicleid: number, X: number, Y: number, Z: number) => number;
export declare const GetVehicleDamageStatus: (vehicleid: number) => {
    panels: any;
    doors: any;
    lights: any;
    tires: any;
};
export declare const UpdateVehicleDamageStatus: (vehicleid: number, panels: number, doors: number, lights: number, tires: number) => number;
export declare const GetVehicleModelInfo: (vehiclemodel: number, infotype: VEHICLE_MODEL_INFO) => {
    x: any;
    y: any;
    z: any;
};
export declare const SetVehicleVirtualWorld: (vehicleid: number, worldid: number) => number;
export declare const GetVehicleVirtualWorld: (vehicleid: number) => number;
export declare const IsValidVehicle: (vehicleid: number) => number;
export declare class SampFunctions {
    static SendClientMessage(playerid: number, color: string, message: string): number;
    static SendClientMessageToAll(color: string, message: string): number;
    static SendPlayerMessageToPlayer(playerid: number, senderid: number, message: string): number;
    static SendPlayerMessageToAll(senderid: number, message: string): number;
    static SendDeathMessage(killer: number, killee: number, weapon: number): number;
    static SendDeathMessageToPlayer(playerid: number, killer: number, killee: number, weapon: number): number;
    static GameTextForAll(string: string, time: number, style: number): number;
    static GameTextForPlayer(playerid: number, string: string, time: number, style: number): number;
    static SetTimer(funcname: string, interval: number, repeating: number): number;
    static KillTimer(timerid: number): number;
    static GetTickCount(): number;
    static GetMaxPlayers(): number;
    static VectorSize(x: number, y: number, z: number): number;
    static asin(value: number): number;
    static acos(value: number): number;
    static atan(value: number): number;
    static atan2(y: number, x: number): number;
    static GetPlayerPoolSize(): number;
    static GetVehiclePoolSize(): number;
    static GetActorPoolSize(): number;
    static SHA256_PassHash(password: string, salt: string, ret_hash_len: number): string;
    static SetSVarInt(varname: string, int_value: number): number;
    static GetSVarInt(varname: string): number;
    static SetSVarString(varname: string, string_value: string): number;
    static GetSVarString(varname: string, len: number): string;
    static SetSVarFloat(varname: string, float_value: number): number;
    static GetSVarFloat(varname: string): number;
    static DeleteSVar(varname: string): number;
    static GetSVarsUpperIndex(): number;
    static GetSVarNameAtIndex(index: number, ret_len: number): string;
    static GetSVarType(varname: string): number;
    static SetGameModeText(string: string): number;
    static SetTeamCount(count: number): number;
    static AddPlayerClass(modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, weapon1: number, weapon1_ammo: number, weapon2: number, weapon2_ammo: number, weapon3: number, weapon3_ammo: number): number;
    static AddPlayerClassEx(teamid: number, modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, weapon1: number, weapon1_ammo: number, weapon2: number, weapon2_ammo: number, weapon3: number, weapon3_ammo: number): number;
    static AddStaticVehicle(modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, color1: number, color2: number): number;
    static AddStaticVehicleEx(modelid: number, spawn_x: number, spawn_y: number, spawn_z: number, z_angle: number, color1: number, color2: number, respawn_delay: number, addsiren: number): number;
    static AddStaticPickup(model: number, type: number, X: number, Y: number, Z: number, virtualworld: number): number;
    static CreatePickup(model: number, type: number, X: number, Y: number, Z: number, virtualworld: number): number;
    static DestroyPickup(pickup: number): number;
    static ShowNameTags(show: number): number;
    static ShowPlayerMarkers(mode: number): number;
    static GameModeExit(): number;
    static SetWorldTime(hour: number): number;
    static GetWeaponName(weaponid: number, len: number): string;
    static EnableTirePopping(enable: number): number;
    static EnableVehicleFriendlyFire(): number;
    static AllowInteriorWeapons(allow: number): number;
    static SetWeather(weatherid: number): number;
    static GetGravity(): number;
    static SetGravity(gravity: number): number;
    static AllowAdminTeleport(allow: number): number;
    static SetDeathDropAmount(amount: number): number;
    static CreateExplosion(X: number, Y: number, Z: number, type: number, Radius: number): number;
    static EnableZoneNames(enable: number): number;
    static UsePlayerPedAnims(): number;
    static DisableInteriorEnterExits(): number;
    static SetNameTagDrawDistance(distance: number): number;
    static DisableNameTagLOS(): number;
    static LimitGlobalChatRadius(chat_radius: number): number;
    static LimitPlayerMarkerRadius(marker_radius: number): number;
    static ConnectNPC(name: string, script: string): number;
    static IsPlayerNPC(playerid: number): number;
    static IsPlayerAdmin(playerid: number): number;
    static Kick(playerid: number): number;
    static Ban(playerid: number): number;
    static BanEx(playerid: number, reason: string): number;
    static SendRconCommand(command: string): number;
    static GetPlayerNetworkStats(playerid: number, retstr_size: number): string;
    static GetNetworkStats(retstr_size: number): string;
    static GetPlayerVersion(playerid: number, len: number): string;
    static BlockIpAddress(ip_address: string, timems: number): number;
    static UnBlockIpAddress(ip_address: string): number;
    static GetServerVarAsString(varname: string, len: number): string;
    static GetServerVarAsInt(varname: string): number;
    static GetServerVarAsBool(varname: string): number;
    static GetConsoleVarAsString(varname: string, len: number): string;
    static GetConsoleVarAsInt(varname: string): number;
    static GetConsoleVarAsBool(varname: string): number;
    static GetServerTickRate(): number;
    static NetStats_GetConnectedTime(playerid: number): number;
    static NetStats_MessagesReceived(playerid: number): number;
    static NetStats_BytesReceived(playerid: number): number;
    static NetStats_MessagesSent(playerid: number): number;
    static NetStats_BytesSent(playerid: number): number;
    static NetStats_MessagesRecvPerSecond(playerid: number): number;
    static NetStats_PacketLossPercent(playerid: number): number;
    static NetStats_ConnectionStatus(playerid: number): number;
    static NetStats_GetIpPort(playerid: number, ip_port_len: number): string;
    static CreateMenu(title: string, columns: number, x: number, y: number, col1width: number, col2width: number): number;
    static DestroyMenu(menuid: number): number;
    static AddMenuItem(menuid: number, column: number, menutext: string): number;
    static SetMenuColumnHeader(menuid: number, column: number, columnheader: string): number;
    static ShowMenuForPlayer(menuid: number, playerid: number): number;
    static HideMenuForPlayer(menuid: number, playerid: number): number;
    static IsValidMenu(menuid: number): number;
    static DisableMenu(menuid: number): number;
    static DisableMenuRow(menuid: number, row: number): number;
    static GetPlayerMenu(playerid: number): number;
    static TextDrawCreate(x: number, y: number, text: string): number;
    static TextDrawDestroy(text: number): number;
    static TextDrawLetterSize(text: number, x: number, y: number): number;
    static TextDrawTextSize(text: number, x: number, y: number): number;
    static TextDrawAlignment(text: number, alignment: number): number;
    static TextDrawColor(text: number, color: string): number;
    static TextDrawUseBox(text: number, use: number): number;
    static TextDrawBoxColor(text: number, color: string): number;
    static TextDrawSetShadow(text: number, size: number): number;
    static TextDrawSetOutline(text: number, size: number): number;
    static TextDrawBackgroundColor(text: number, color: string): number;
    static TextDrawFont(text: number, font: number): number;
    static TextDrawSetProportional(text: number, set: number): number;
    static TextDrawSetSelectable(text: number, set: number): number;
    static TextDrawShowForPlayer(playerid: number, text: number): number;
    static TextDrawHideForPlayer(playerid: number, text: number): number;
    static TextDrawShowForAll(text: number): number;
    static TextDrawHideForAll(text: number): number;
    static TextDrawSetString(text: number, string: string): number;
    static TextDrawSetPreviewModel(text: number, modelindex: number): number;
    static TextDrawSetPreviewRot(text: number, fRotX: number, fRotY: number, fRotZ: number, fZoom: number): number;
    static TextDrawSetPreviewVehCol(text: number, color1: number, color2: number): number;
    static GangZoneCreate(minx: number, miny: number, maxx: number, maxy: number): number;
    static GangZoneDestroy(zone: number): number;
    static GangZoneShowForPlayer(playerid: number, zone: number, color: string): number;
    static GangZoneShowForAll(zone: number, color: string): number;
    static GangZoneHideForPlayer(playerid: number, zone: number): number;
    static GangZoneHideForAll(zone: number): number;
    static GangZoneFlashForPlayer(playerid: number, zone: number, flashcolor: string): number;
    static GangZoneFlashForAll(zone: number, flashcolor: string): number;
    static GangZoneStopFlashForPlayer(playerid: number, zone: number): number;
    static GangZoneStopFlashForAll(zone: number): number;
    static Create3DTextLabel(text: string, color: string, X: number, Y: number, Z: number, DrawDistance: number, virtualworld: number, testLOS: number): number;
    static Delete3DTextLabel(id: number): number;
    static Attach3DTextLabelToPlayer(id: number, playerid: number, OffsetX: number, OffsetY: number, OffsetZ: number): number;
    static Attach3DTextLabelToVehicle(id: number, vehicleid: number, OffsetX: number, OffsetY: number, OffsetZ: number): number;
    static Update3DTextLabelText(id: number, color: string, text: string): number;
    static CreatePlayer3DTextLabel(playerid: number, text: string, color: string, X: number, Y: number, Z: number, DrawDistance: number, attachedplayer: number, attachedvehicle: number, testLOS: number): number;
    static DeletePlayer3DTextLabel(playerid: number, id: number): number;
    static UpdatePlayer3DTextLabelText(playerid: number, id: number, color: string, text: string): number;
    static ShowPlayerDialog(playerid: number, dialogid: number, style: number, caption: string, info: string, button1: string, button2: string): number;
    static gpci(playerid: number, maxlen: number): string;
    static CreateActor(modelid: number, X: number, Y: number, Z: number, Rotation: number): number;
    static DestroyActor(actorid: number): number;
    static IsActorStreamedIn(actorid: number, forplayerid: number): number;
    static SetActorVirtualWorld(actorid: number, vworld: number): number;
    static GetActorVirtualWorld(actorid: number): number;
    static ApplyActorAnimation(actorid: number, animlib: string, animname: string, fDelta: number, loop: number, lockx: number, locky: number, freeze: number, time: number): number;
    static ClearActorAnimations(actorid: number): number;
    static SetActorPos(actorid: number, X: number, Y: number, Z: number): number;
    static GetActorPos(actorid: number): Array<any>;
    static SetActorFacingAngle(actorid: number, ang: number): number;
    static GetActorFacingAngle(actorid: number): number;
    static SetActorHealth(actorid: number, health: number): number;
    static GetActorHealth(actorid: number): number;
    static SetActorInvulnerable(actorid: number, invulnerable: number): number;
    static IsActorInvulnerable(actorid: number): number;
    static IsValidActor(actorid: number): number;
    static HTTP(index: number, type: number, url: string, data: string, callback: string): number;
    static CreateObject(modelid: number, X: number, Y: number, Z: number, rX: number, rY: number, rZ: number, DrawDistance: number): number;
    static AttachObjectToVehicle(objectid: number, vehicleid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number): number;
    static AttachObjectToObject(objectid: number, attachtoid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number, SyncRotation: number): number;
    static AttachObjectToPlayer(objectid: number, playerid: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotX: number, RotY: number, RotZ: number): number;
    static SetObjectPos(objectid: number, X: number, Y: number, Z: number): number;
    static GetObjectPos(objectid: number): Array<any>;
    static SetObjectRot(objectid: number, RotX: number, RotY: number, RotZ: number): number;
    static GetObjectRot(objectid: number): Array<any>;
    static GetObjectModel(objectid: number): number;
    static SetObjectNoCameraCol(objectid: number): number;
    static IsValidObject(objectid: number): number;
    static DestroyObject(objectid: number): number;
    static MoveObject(objectid: number, X: number, Y: number, Z: number, Speed: number, RotX: number, RotY: number, RotZ: number): number;
    static StopObject(objectid: number): number;
    static IsObjectMoving(objectid: number): number;
    static EditObject(playerid: number, objectid: number): number;
    static EditPlayerObject(playerid: number, objectid: number): number;
    static SelectObject(playerid: number): number;
    static CancelEdit(playerid: number): number;
    static CreatePlayerObject(playerid: number, modelid: number, X: number, Y: number, Z: number, rX: number, rY: number, rZ: number, DrawDistance: number): number;
    static AttachPlayerObjectToVehicle(playerid: number, objectid: number, vehicleid: number, fOffsetX: number, fOffsetY: number, fOffsetZ: number, fRotX: number, fRotY: number, RotZ: number): number;
    static SetPlayerObjectPos(playerid: number, objectid: number, X: number, Y: number, Z: number): number;
    static GetPlayerObjectPos(playerid: number, objectid: number): Array<any>;
    static SetPlayerObjectRot(playerid: number, objectid: number, RotX: number, RotY: number, RotZ: number): number;
    static GetPlayerObjectRot(playerid: number, objectid: number): Array<any>;
    static GetPlayerObjectModel(playerid: number, objectid: number): number;
    static SetPlayerObjectNoCameraCol(playerid: number, objectid: number): number;
    static IsValidPlayerObject(playerid: number, objectid: number): number;
    static DestroyPlayerObject(playerid: number, objectid: number): number;
    static MovePlayerObject(playerid: number, objectid: number, X: number, Y: number, Z: number, Speed: number, RotX: number, RotY: number, RotZ: number): number;
    static StopPlayerObject(playerid: number, objectid: number): number;
    static IsPlayerObjectMoving(playerid: number, objectid: number): number;
    static AttachPlayerObjectToPlayer(objectplayer: number, objectid: number, attachplayer: number, OffsetX: number, OffsetY: number, OffsetZ: number, rX: number, rY: number, rZ: number): number;
    static SetObjectMaterial(objectid: number, materialindex: number, modelid: number, txdname: string, texturename: string, materialcolor: string): number;
    static SetPlayerObjectMaterial(playerid: number, objectid: number, materialindex: number, modelid: number, txdname: string, texturename: string, materialcolor: string): number;
    static SetObjectMaterialText(objectid: number, text: string, materialindex: number, materialsize: number, fontface: string, fontsize: number, bold: number, fontcolor: string, backcolor: string, textalignment: number): number;
    static SetPlayerObjectMaterialText(playerid: number, objectid: number, text: string, materialindex: number, materialsize: number, fontface: string, fontsize: number, bold: number, fontcolor: string, backcolor: string, textalignment: number): number;
    static SetObjectsDefaultCameraCol(disable: number): number;
    static SetSpawnInfo(playerid: number, team: number, skin: number, x: number, y: number, z: number, rotation: number, weapon1: number, weapon1_ammo: number, weapon2: number, weapon2_ammo: number, weapon3: number, weapon3_ammo: number): number;
    static SpawnPlayer(playerid: number): number;
    static SetPlayerPos(playerid: number, x: number, y: number, z: number): number;
    static SetPlayerPosFindZ(playerid: number, x: number, y: number, z: number): number;
    static GetPlayerPos(playerid: number): Array<any>;
    static SetPlayerFacingAngle(playerid: number, ang: number): number;
    static GetPlayerFacingAngle(playerid: number): number;
    static IsPlayerInRangeOfPoint(playerid: number, range: number, x: number, y: number, z: number): number;
    static GetPlayerDistanceFromPoint(playerid: number, X: number, Y: number, Z: number): number;
    static IsPlayerStreamedIn(playerid: number, forplayerid: number): number;
    static SetPlayerInterior(playerid: number, interiorid: number): number;
    static GetPlayerInterior(playerid: number): number;
    static SetPlayerHealth(playerid: number, health: number): number;
    static GetPlayerHealth(playerid: number): number;
    static SetPlayerArmour(playerid: number, armour: number): number;
    static GetPlayerArmour(playerid: number): number;
    static SetPlayerAmmo(playerid: number, weaponslot: number, ammo: number): number;
    static GetPlayerAmmo(playerid: number): number;
    static GetPlayerWeaponState(playerid: number): number;
    static GetPlayerTargetPlayer(playerid: number): number;
    static GetPlayerTargetActor(playerid: number): number;
    static SetPlayerTeam(playerid: number, teamid: number): number;
    static GetPlayerTeam(playerid: number): number;
    static SetPlayerScore(playerid: number, score: number): number;
    static GetPlayerScore(playerid: number): number;
    static GetPlayerDrunkLevel(playerid: number): number;
    static SetPlayerDrunkLevel(playerid: number, level: number): number;
    static SetPlayerColor(playerid: number, color: string): number;
    static GetPlayerColor(playerid: number): number;
    static SetPlayerSkin(playerid: number, skinid: number): number;
    static GetPlayerSkin(playerid: number): number;
    static GivePlayerWeapon(playerid: number, weaponid: number, ammo: number): number;
    static ResetPlayerWeapons(playerid: number): number;
    static SetPlayerArmedWeapon(playerid: number, weaponid: number): number;
    static GetPlayerWeaponData(playerid: number, slot: number): Array<any>;
    static GivePlayerMoney(playerid: number, money: number): number;
    static ResetPlayerMoney(playerid: number): number;
    static SetPlayerName(playerid: number, name: string): number;
    static GetPlayerMoney(playerid: number): number;
    static GetPlayerState(playerid: number): number;
    static GetPlayerIp(playerid: number, len: number): string;
    static GetPlayerPing(playerid: number): number;
    static GetPlayerWeapon(playerid: number): number;
    static GetPlayerKeys(playerid: number): Array<any>;
    static GetPlayerName(playerid: number, len: number): string;
    static SetPlayerTime(playerid: number, hour: number, minute: number): number;
    static GetPlayerTime(playerid: number): Array<any>;
    static TogglePlayerClock(playerid: number, toggle: number): number;
    static SetPlayerWeather(playerid: number, weather: number): number;
    static ForceClassSelection(playerid: number): number;
    static SetPlayerWantedLevel(playerid: number, level: number): number;
    static GetPlayerWantedLevel(playerid: number): number;
    static SetPlayerFightingStyle(playerid: number, style: FIGHT_STYLE): number;
    static GetPlayerFightingStyle(playerid: number): FIGHT_STYLE;
    static SetPlayerVelocity(playerid: number, X: number, Y: number, Z: number): number;
    static GetPlayerVelocity(playerid: number): Array<any>;
    static PlayCrimeReportForPlayer(playerid: number, suspectid: number, crime: number): number;
    static PlayAudioStreamForPlayer(playerid: number, url: string, posX: number, posY: number, posZ: number, distance: number, usepos: number): number;
    static StopAudioStreamForPlayer(playerid: number): number;
    static SetPlayerShopName(playerid: number, shopname: string): number;
    static SetPlayerSkillLevel(playerid: number, skill: WEAPONSKILL, level: number): number;
    static GetPlayerSurfingVehicleID(playerid: number): number;
    static GetPlayerSurfingObjectID(playerid: number): number;
    static RemoveBuildingForPlayer(playerid: number, modelid: number, fX: number, fY: number, fZ: number, fRadius: number): number;
    static GetPlayerLastShotVectors(playerid: number): Array<any>;
    static SetPlayerAttachedObject(playerid: number, index: number, modelid: number, bone: number, fOffsetX: number, fOffsetY: number, fOffsetZ: number, fRotX: number, fRotY: number, fRotZ: number, fScaleX: number, fScaleY: number, fScaleZ: number, materialcolor1: number, materialcolor2: number): number;
    static RemovePlayerAttachedObject(playerid: number, index: number): number;
    static IsPlayerAttachedObjectSlotUsed(playerid: number, index: number): number;
    static EditAttachedObject(playerid: number, index: number): number;
    static CreatePlayerTextDraw(playerid: number, x: number, y: number, text: string): number;
    static PlayerTextDrawDestroy(playerid: number, text: number): void;
    static PlayerTextDrawLetterSize(playerid: number, text: number, x: number, y: number): number;
    static PlayerTextDrawTextSize(playerid: number, text: number, x: number, y: number): number;
    static PlayerTextDrawAlignment(playerid: number, text: number, alignment: TEXTDRAW_ALIGN): number;
    static PlayerTextDrawColor(playerid: number, text: number, color: string): number;
    static PlayerTextDrawUseBox(playerid: number, text: number, use: 0 | 1): number;
    static PlayerTextDrawBoxColor(playerid: number, text: number, color: string): number;
    static PlayerTextDrawSetShadow(playerid: number, text: number, size: number): number;
    static PlayerTextDrawSetOutline(playerid: number, text: number, size: number): number;
    static PlayerTextDrawBackgroundColor(playerid: number, text: number, color: string): number;
    static PlayerTextDrawFont(playerid: number, text: number, font: number): number;
    static PlayerTextDrawSetProportional(playerid: number, text: number, set: number): number;
    static PlayerTextDrawSetSelectable(playerid: number, text: number, set: number): number;
    static PlayerTextDrawShow(playerid: number, text: number): number;
    static PlayerTextDrawHide(playerid: number, text: number): number;
    static PlayerTextDrawSetString(playerid: number, text: number, string: string): number;
    static PlayerTextDrawSetPreviewModel(playerid: number, text: number, modelindex: number): number;
    static PlayerTextDrawSetPreviewRot(playerid: number, text: number, fRotX: number, fRotY: number, fRotZ: number, fZoom: number): number;
    static PlayerTextDrawSetPreviewVehCol(playerid: number, text: number, color1: number, color2: number): number;
    static SetPVarInt(playerid: number, varname: string, int_value: number): number;
    static GetPVarInt(playerid: number, varname: string): number;
    static SetPVarString(playerid: number, varname: string, string_value: string): number;
    static GetPVarString(playerid: number, varname: string, len: number): string;
    static SetPVarFloat(playerid: number, varname: string, float_value: number): number;
    static GetPVarFloat(playerid: number, varname: string): number;
    static DeletePVar(playerid: number, varname: string): number;
    static GetPVarsUpperIndex(playerid: number): number;
    static GetPVarNameAtIndex(playerid: number, index: number, ret_len: number): string;
    static GetPVarType(playerid: number, varname: string): number;
    static SetPlayerChatBubble(playerid: number, text: string, color: string, drawdistance: number, expiretime: number): number;
    static PutPlayerInVehicle(playerid: number, vehicleid: number, seatid: number): number;
    static GetPlayerVehicleID(playerid: number): number;
    static GetPlayerVehicleSeat(playerid: number): number;
    static RemovePlayerFromVehicle(playerid: number): number;
    static TogglePlayerControllable(playerid: number, toggle: number): number;
    static PlayerPlaySound(playerid: number, soundid: number, x: number, y: number, z: number): number;
    static ApplyAnimation(playerid: number, animlib: string, animname: string, fDelta: number, loop: number, lockx: number, locky: number, freeze: number, time: number, forcesync: number): number;
    static ClearAnimations(playerid: number, forcesync: number): number;
    static GetPlayerAnimationIndex(playerid: number): number;
    static GetAnimationName(index: number, len1: number, len2: number): Array<any>;
    static GetPlayerSpecialAction(playerid: number): number;
    static SetPlayerSpecialAction(playerid: number, actionid: number): number;
    static DisableRemoteVehicleCollisions(playerid: number, disable: number): number;
    static SetPlayerCheckpoint(playerid: number, x: number, y: number, z: number, size: number): number;
    static DisablePlayerCheckpoint(playerid: number): number;
    static SetPlayerRaceCheckpoint(playerid: number, type: number, x: number, y: number, z: number, nextx: number, nexty: number, nextz: number, size: number): number;
    static DisablePlayerRaceCheckpoint(playerid: number): number;
    static SetPlayerWorldBounds(playerid: number, x_max: number, x_min: number, y_max: number, y_min: number): number;
    static SetPlayerMarkerForPlayer(playerid: number, showplayerid: number, color: string): number;
    static ShowPlayerNameTagForPlayer(playerid: number, showplayerid: number, show: number): number;
    static SetPlayerMapIcon(playerid: number, iconid: number, x: number, y: number, z: number, markertype: number, color: string, style: number): number;
    static RemovePlayerMapIcon(playerid: number, iconid: number): number;
    static AllowPlayerTeleport(playerid: number, allow: number): number;
    static SetPlayerCameraPos(playerid: number, x: number, y: number, z: number): number;
    static SetPlayerCameraLookAt(playerid: number, x: number, y: number, z: number, cut: number): number;
    static SetCameraBehindPlayer(playerid: number): number;
    static GetPlayerCameraPos(playerid: number): Array<any>;
    static GetPlayerCameraFrontVector(playerid: number): Array<any>;
    static GetPlayerCameraMode(playerid: number): number;
    static EnablePlayerCameraTarget(playerid: number, enable: number): number;
    static GetPlayerCameraTargetObject(playerid: number): number;
    static GetPlayerCameraTargetVehicle(playerid: number): number;
    static GetPlayerCameraTargetPlayer(playerid: number): number;
    static GetPlayerCameraTargetActor(playerid: number): number;
    static GetPlayerCameraAspectRatio(playerid: number): number;
    static GetPlayerCameraZoom(playerid: number): number;
    static AttachCameraToObject(playerid: number, objectid: number): number;
    static AttachCameraToPlayerObject(playerid: number, playerobjectid: number): number;
    static InterpolateCameraPos(playerid: number, FromX: number, FromY: number, FromZ: number, ToX: number, ToY: number, ToZ: number, time: number, cut: number): number;
    static InterpolateCameraLookAt(playerid: number, FromX: number, FromY: number, FromZ: number, ToX: number, ToY: number, ToZ: number, time: number, cut: number): number;
    static IsPlayerConnected(playerid: number): number;
    static IsPlayerInVehicle(playerid: number, vehicleid: number): number;
    static IsPlayerInAnyVehicle(playerid: number): number;
    static IsPlayerInCheckpoint(playerid: number): number;
    static IsPlayerInRaceCheckpoint(playerid: number): number;
    static SetPlayerVirtualWorld(playerid: number, worldid: number): number;
    static GetPlayerVirtualWorld(playerid: number): number;
    static EnableStuntBonusForPlayer(playerid: number, enable: number): number;
    static EnableStuntBonusForAll(enable: number): number;
    static TogglePlayerSpectating(playerid: number, toggle: number): number;
    static PlayerSpectatePlayer(playerid: number, targetplayerid: number, mode: number): number;
    static PlayerSpectateVehicle(playerid: number, targetvehicleid: number, mode: number): number;
    static StartRecordingPlayerData(playerid: number, recordtype: number, recordname: string): number;
    static StopRecordingPlayerData(playerid: number): number;
    static SelectTextDraw(playerid: number, hovercolor: string): number;
    static CancelSelectTextDraw(playerid: number): number;
    static CreateExplosionForPlayer(playerid: number, X: number, Y: number, Z: number, type: number, Radius: number): number;
    static SendClientCheck(playerid: number, type: number, memAddr: number, memOffset: number, byteCount: number): number;
    static db_open(name: string): number;
    static db_close(db: number): number;
    static db_query(db: number, query: string): number;
    static db_free_result(dbresult: number): number;
    static db_num_rows(dbresult: number): number;
    static db_next_row(dbresult: number): number;
    static db_num_fields(dbresult: number): number;
    static db_field_name(dbresult: number, field: number, maxlength: number): string;
    static db_get_field(dbresult: number, field: number, maxlength: number): string;
    static db_get_field_int(result: number, field: number): number;
    static db_get_field_float(result: number, field: number): number;
    static db_get_field_assoc(dbresult: number, field: string, maxlength: number): string;
    static db_get_field_assoc_int(result: number, field: string): number;
    static db_get_field_assoc_float(result: number, field: string): number;
    static db_get_mem_handle(db: number): number;
    static db_get_result_mem_handle(result: number): number;
    static db_debug_openfiles(): number;
    static db_debug_openresults(): number;
    static CreateVehicle(vehicletype: number, x: number, y: number, z: number, rotation: number, color1: number, color2: number, respawn_delay: number, addsiren: number): number;
    static DestroyVehicle(vehicleid: number): number;
    static IsVehicleStreamedIn(vehicleid: number, forplayerid: number): number;
    static GetVehiclePos(vehicleid: number): {
        x: any;
        y: any;
        z: any;
    };
    static SetVehiclePos(vehicleid: number, x: number, y: number, z: number): number;
    static GetVehicleZAngle(vehicleid: number): number;
    static GetVehicleRotationQuat(vehicleid: number): Array<any>;
    static GetVehicleDistanceFromPoint(vehicleid: number, X: number, Y: number, Z: number): number;
    static SetVehicleZAngle(vehicleid: number, z_angle: number): number;
    static SetVehicleParamsForPlayer(vehicleid: number, playerid: number, objective: number, doorslocked: number): number;
    static ManualVehicleEngineAndLights(): number;
    static SetVehicleParamsEx(vehicleid: number, engine: number, lights: number, alarm: number, doors: number, bonnet: number, boot: number, objective: number): number;
    static GetVehicleParamsEx(vehicleid: number): Array<any>;
    static GetVehicleParamsSirenState(vehicleid: number): number;
    static SetVehicleParamsCarDoors(vehicleid: number, driver: number, passenger: number, backleft: number, backright: number): number;
    static GetVehicleParamsCarDoors(vehicleid: number): {
        driver: -1 | 0 | 1;
        passenger: -1 | 0 | 1;
        backleft: -1 | 0 | 1;
        backright: -1 | 0 | 1;
    };
    static SetVehicleParamsCarWindows(vehicleid: number, driver: number, passenger: number, backleft: number, backright: number): number;
    static GetVehicleParamsCarWindows(vehicleid: number): {
        driver: -1 | 0 | 1;
        passenger: -1 | 0 | 1;
        backleft: -1 | 0 | 1;
        backright: -1 | 0 | 1;
    };
    static SetVehicleToRespawn(vehicleid: number): number;
    static LinkVehicleToInterior(vehicleid: number, interiorid: number): number;
    static AddVehicleComponent(vehicleid: number, componentid: number): number;
    static RemoveVehicleComponent(vehicleid: number, componentid: number): number;
    static ChangeVehicleColor(vehicleid: number, color1: number, color2: number): number;
    static ChangeVehiclePaintjob(vehicleid: number, paintjobid: number): number;
    static SetVehicleHealth(vehicleid: number, health: number): number;
    static GetVehicleHealth(vehicleid: number): number;
    static AttachTrailerToVehicle(trailerid: number, vehicleid: number): number;
    static DetachTrailerFromVehicle(vehicleid: number): number;
    static IsTrailerAttachedToVehicle(vehicleid: number): number;
    static GetVehicleTrailer(vehicleid: number): number;
    static SetVehicleNumberPlate(vehicleid: number, numberplate: string): number;
    static GetVehicleModel(vehicleid: number): number;
    static GetVehicleComponentInSlot(vehicleid: number, slot: CARMODTYPE): number;
    static GetVehicleComponentType(component: number): CARMODTYPE | -1;
    static RepairVehicle(vehicleid: number): number;
    static GetVehicleVelocity(vehicleid: number): Array<any>;
    static SetVehicleVelocity(vehicleid: number, X: number, Y: number, Z: number): number;
    static SetVehicleAngularVelocity(vehicleid: number, X: number, Y: number, Z: number): number;
    static GetVehicleDamageStatus(vehicleid: number): {
        panels: any;
        doors: any;
        lights: any;
        tires: any;
    };
    static UpdateVehicleDamageStatus(vehicleid: number, panels: number, doors: number, lights: number, tires: number): number;
    static GetVehicleModelInfo(vehiclemodel: number, infotype: VEHICLE_MODEL_INFO): {
        x: any;
        y: any;
        z: any;
    };
    static SetVehicleVirtualWorld(vehicleid: number, worldid: number): number;
    static GetVehicleVirtualWorld(vehicleid: number): number;
    static IsValidVehicle(vehicleid: number): number;
}
